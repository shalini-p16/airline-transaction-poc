2025.07.04 13:37:20.974810 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.04 13:37:21.082497 [ 1 ] {} <Warning> Access(local_directory): File /var/lib/clickhouse/access/users.list doesn't exist
2025.07.04 13:37:21.083166 [ 1 ] {} <Warning> Access(local_directory): Recovering lists in directory /var/lib/clickhouse/access/
2025.07.04 13:37:21.090564 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.04 13:37:21.091520 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.04 13:37:21.136337 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 13:37:21.136562 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 13:38:47.888783 [ 82 ] {} <Warning> HTTPServerRequest: Got an HTTP request with no content length and no chunked/multipart encoding, it may be impossible to distinguish graceful EOF from abnormal connection loss
2025.07.04 13:38:47.908156 [ 80 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:39:07.100699 [ 81 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:04.465790 [ 81 ] {} <Warning> HTTPServerRequest: Got an HTTP request with no content length and no chunked/multipart encoding, it may be impossible to distinguish graceful EOF from abnormal connection loss
2025.07.04 13:40:04.487806 [ 80 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:14.420643 [ 80 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.291605 [ 80 ] {a5d79554-01ea-4943-b638-e60f65f7be84} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.291641 [ 82 ] {c21950e2-ee68-48f4-b2fd-6561dd95e92c} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Merge) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.291692 [ 81 ] {d67f9faf-4ae9-475c-960d-a199f119bb14} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.291714 [ 942 ] {a16e4e6f-9744-42be-a0e1-4c125fd3a23a} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSIOWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.291753 [ 808 ] {e40f9157-f5f1-45d2-935f-afa9d46cd0da} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUVirtualTimeMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.296022 [ 942 ] {a16e4e6f-9744-42be-a0e1-4c125fd3a23a} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.293814 [ 80 ] {a5d79554-01ea-4943-b638-e60f65f7be84} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.294241 [ 82 ] {c21950e2-ee68-48f4-b2fd-6561dd95e92c} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.295438 [ 81 ] {d67f9faf-4ae9-475c-960d-a199f119bb14} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.291780 [ 941 ] {a205410e-02ee-4408-afaa-a33f2aec319a} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.296809 [ 808 ] {e40f9157-f5f1-45d2-935f-afa9d46cd0da} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.301560 [ 941 ] {a205410e-02ee-4408-afaa-a33f2aec319a} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.307490 [ 942 ] {54e4183b-6040-477d-b2d9-0425cf1d8b0b} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.307848 [ 80 ] {aa0a7cb9-aa98-4811-9ea2-d710cf7bd8db} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSUserTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.308385 [ 81 ] {720288e8-0ea6-4b7f-9a69-00c7e25b52d3} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSSystemTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.309971 [ 942 ] {54e4183b-6040-477d-b2d9-0425cf1d8b0b} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.311063 [ 81 ] {720288e8-0ea6-4b7f-9a69-00c7e25b52d3} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.311379 [ 80 ] {aa0a7cb9-aa98-4811-9ea2-d710cf7bd8db} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.313726 [ 82 ] {210349a4-b274-4962-b557-61d8053b08f9} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.315174 [ 82 ] {210349a4-b274-4962-b557-61d8053b08f9} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.316260 [ 808 ] {056c51b5-fa6d-4e34-9de4-34cb6ba87740} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadChars) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.317749 [ 941 ] {7ab05fb1-d63f-4e9e-8fb7-d9dcf8a76701} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_MemoryTracking) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.318914 [ 808 ] {056c51b5-fa6d-4e34-9de4-34cb6ba87740} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.319888 [ 942 ] {bee65149-23bb-423b-a9df-0aa591bd25e7} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.321548 [ 941 ] {7ab05fb1-d63f-4e9e-8fb7-d9dcf8a76701} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.323203 [ 82 ] {7151e606-4f25-4068-bf8b-e72621ed917f} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_InsertedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.323508 [ 80 ] {5f24309a-29e1-4591-9ea5-3b779cd038c8} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'LoadAverage15') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.323986 [ 942 ] {bee65149-23bb-423b-a9df-0aa591bd25e7} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.325388 [ 80 ] {5f24309a-29e1-4591-9ea5-3b779cd038c8} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.326205 [ 81 ] {f573f6c4-ee89-40ca-9c7d-4f57ca3b0481} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, arraySum([COLUMNS('CurrentMetric_.*CacheBytes') EXCEPT 'CurrentMetric_FilesystemCache.*' APPLY avg]) AS metric FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.328308 [ 81 ] {f573f6c4-ee89-40ca-9c7d-4f57ca3b0481} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.329104 [ 82 ] {7151e606-4f25-4068-bf8b-e72621ed917f} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.330105 [ 808 ] {589f973f-41e1-4bf0-ab44-d77fef050afa} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'TotalPartsOfMergeTreeTables') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.332269 [ 808 ] {589f973f-41e1-4bf0-ab44-d77fef050afa} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.335271 [ 942 ] {ac3b7bf3-cacf-4ffa-a0a4-f80bc05cc232} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(CurrentMetric_TCPConnection) AS TCP_Connections, max(CurrentMetric_MySQLConnection) AS MySQL_Connections, max(CurrentMetric_HTTPConnection) AS HTTP_Connections, max(CurrentMetric_InterserverConnection) AS Interserver_Connections FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.335333 [ 941 ] {dd1daf2c-9e4d-442d-b4af-be2dad158f90} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'MaxPartCountForPartition') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:24.336275 [ 942 ] {ac3b7bf3-cacf-4ffa-a0a4-f80bc05cc232} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:24.336687 [ 941 ] {dd1daf2c-9e4d-442d-b4af-be2dad158f90} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.926456 [ 941 ] {334405ce-b73d-4ae0-b4b6-f8e97c6288fa} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.927277 [ 81 ] {4b8abaac-8ec8-4b47-9386-fa503650e194} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Merge) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.928402 [ 808 ] {d318c65a-8130-4fb8-a9f5-26db3e1cdddc} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.929013 [ 82 ] {b9cbb626-18e0-471b-9ced-935f80e6f9f4} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.930907 [ 81 ] {4b8abaac-8ec8-4b47-9386-fa503650e194} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.929193 [ 80 ] {bf1e3204-999d-4ec8-935c-f8192509c26e} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSIOWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.932008 [ 942 ] {dbccf07c-5c0c-4412-a2b8-06a4aa7eb1e1} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUVirtualTimeMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.932602 [ 941 ] {334405ce-b73d-4ae0-b4b6-f8e97c6288fa} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.933959 [ 808 ] {d318c65a-8130-4fb8-a9f5-26db3e1cdddc} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.934304 [ 82 ] {b9cbb626-18e0-471b-9ced-935f80e6f9f4} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.935359 [ 80 ] {bf1e3204-999d-4ec8-935c-f8192509c26e} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.936206 [ 942 ] {dbccf07c-5c0c-4412-a2b8-06a4aa7eb1e1} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.944600 [ 808 ] {c62a81d8-0c02-450b-a78b-aa3ba226a391} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSSystemTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.945118 [ 82 ] {21a2cd9e-7ff9-45f6-ad02-7474bfc34287} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.947705 [ 941 ] {dc99ad12-c0a6-4c9e-bc06-fb9de474717b} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSUserTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.947879 [ 82 ] {21a2cd9e-7ff9-45f6-ad02-7474bfc34287} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.948436 [ 808 ] {c62a81d8-0c02-450b-a78b-aa3ba226a391} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.948604 [ 81 ] {078281ec-014e-4154-a0d8-149600ed7904} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.948958 [ 942 ] {93c41008-c467-4492-958e-ba8c3e3edd5f} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_MemoryTracking) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.950158 [ 941 ] {dc99ad12-c0a6-4c9e-bc06-fb9de474717b} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.951641 [ 80 ] {c90cf44b-db38-4514-a701-895cdf265339} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadChars) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.955128 [ 942 ] {93c41008-c467-4492-958e-ba8c3e3edd5f} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.955864 [ 81 ] {078281ec-014e-4154-a0d8-149600ed7904} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.960143 [ 80 ] {c90cf44b-db38-4514-a701-895cdf265339} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.966847 [ 942 ] {d1ebc565-8d00-45d3-bc6b-27d33d5b35b1} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_InsertedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.967569 [ 941 ] {50d77e06-a4d1-4d20-b4ef-97bed6f67a45} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.970624 [ 82 ] {9c07b45a-d371-4529-b5df-0a31dac00bfe} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, arraySum([COLUMNS('CurrentMetric_.*CacheBytes') EXCEPT 'CurrentMetric_FilesystemCache.*' APPLY avg]) AS metric FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.971090 [ 941 ] {50d77e06-a4d1-4d20-b4ef-97bed6f67a45} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.974275 [ 80 ] {f85d62f9-364b-44ba-bacd-8dfc19a254ca} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'MaxPartCountForPartition') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.974332 [ 808 ] {c432428c-e2a1-431b-81fa-061bf51c05c7} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'LoadAverage15') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.974529 [ 942 ] {d1ebc565-8d00-45d3-bc6b-27d33d5b35b1} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.976977 [ 82 ] {9c07b45a-d371-4529-b5df-0a31dac00bfe} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.979291 [ 808 ] {c432428c-e2a1-431b-81fa-061bf51c05c7} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.980212 [ 80 ] {f85d62f9-364b-44ba-bacd-8dfc19a254ca} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.981300 [ 81 ] {fc1145ad-94f8-4e68-944d-0159e8cecf69} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'TotalPartsOfMergeTreeTables') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.984463 [ 81 ] {fc1145ad-94f8-4e68-944d-0159e8cecf69} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:25.986285 [ 941 ] {00aadd62-c692-48dd-b0d9-a78ec044257c} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(CurrentMetric_TCPConnection) AS TCP_Connections, max(CurrentMetric_MySQLConnection) AS MySQL_Connections, max(CurrentMetric_HTTPConnection) AS HTTP_Connections, max(CurrentMetric_InterserverConnection) AS Interserver_Connections FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:25.987782 [ 941 ] {00aadd62-c692-48dd-b0d9-a78ec044257c} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.086623 [ 941 ] {fec029d4-e3ab-4925-b9e4-2eca455a8f0b} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.087318 [ 808 ] {fbac6e33-9cce-4b73-b755-32138ad3d153} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Merge) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.088828 [ 80 ] {33cce6ef-9efb-45b8-b5e2-b37e14e5c06e} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.088875 [ 81 ] {299c5250-e7b2-4a34-95a5-967065c43fa9} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUVirtualTimeMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.092010 [ 808 ] {fbac6e33-9cce-4b73-b755-32138ad3d153} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.090461 [ 942 ] {c2f8ce9f-6585-4c20-98d4-bbd4532d315c} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSIOWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.090728 [ 82 ] {7f8e1b92-e390-4ef1-8ffa-43132e758348} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.089615 [ 941 ] {fec029d4-e3ab-4925-b9e4-2eca455a8f0b} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.092331 [ 80 ] {33cce6ef-9efb-45b8-b5e2-b37e14e5c06e} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.093099 [ 81 ] {299c5250-e7b2-4a34-95a5-967065c43fa9} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.093920 [ 942 ] {c2f8ce9f-6585-4c20-98d4-bbd4532d315c} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.095351 [ 82 ] {7f8e1b92-e390-4ef1-8ffa-43132e758348} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.104760 [ 808 ] {6130fb57-8153-4685-afe5-032798419a12} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.105149 [ 80 ] {b0333390-68fc-4563-bf83-3fb863b5536e} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSUserTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.106258 [ 82 ] {50889225-7f0c-4d32-89b6-d32050dbbd8b} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadChars) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.107624 [ 808 ] {6130fb57-8153-4685-afe5-032798419a12} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.107826 [ 942 ] {0a8c3cdf-21e3-4e06-a79a-56126227fde5} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.108038 [ 941 ] {e145efdf-51ce-444d-8736-f21830ea6f85} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSSystemTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.111029 [ 942 ] {0a8c3cdf-21e3-4e06-a79a-56126227fde5} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.112328 [ 941 ] {e145efdf-51ce-444d-8736-f21830ea6f85} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.108382 [ 80 ] {b0333390-68fc-4563-bf83-3fb863b5536e} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.112903 [ 82 ] {50889225-7f0c-4d32-89b6-d32050dbbd8b} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.114970 [ 81 ] {344dce3c-e058-48a5-8874-ada76d032986} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_MemoryTracking) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.119683 [ 81 ] {344dce3c-e058-48a5-8874-ada76d032986} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.124420 [ 808 ] {a8d8537e-92b6-4ace-b247-1fa54acb493e} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, arraySum([COLUMNS('CurrentMetric_.*CacheBytes') EXCEPT 'CurrentMetric_FilesystemCache.*' APPLY avg]) AS metric FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.125658 [ 808 ] {a8d8537e-92b6-4ace-b247-1fa54acb493e} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.127362 [ 941 ] {f521193c-22f3-4036-a132-5cf7392617bb} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38981) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'LoadAverage15') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.127503 [ 80 ] {7324baac-dea9-4392-99e4-bc5f03fb2c26} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17454) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_InsertedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.129849 [ 80 ] {7324baac-dea9-4392-99e4-bc5f03fb2c26} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.131623 [ 942 ] {2f678837-a375-434b-8a91-7b30e005c168} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:32612) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.132331 [ 941 ] {f521193c-22f3-4036-a132-5cf7392617bb} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.133520 [ 82 ] {edda0876-af6f-428d-9389-7d4c1636f52a} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:49819) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'TotalPartsOfMergeTreeTables') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.133778 [ 81 ] {6736a72c-baff-4ef3-94ae-c2c8f648d23a} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:38849) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'MaxPartCountForPartition') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.135200 [ 942 ] {2f678837-a375-434b-8a91-7b30e005c168} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.136820 [ 82 ] {edda0876-af6f-428d-9389-7d4c1636f52a} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.137280 [ 81 ] {6736a72c-baff-4ef3-94ae-c2c8f648d23a} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 13:40:28.141630 [ 808 ] {62dca95e-249f-4840-933f-2bcc262b7e0d} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:41818) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(CurrentMetric_TCPConnection) AS TCP_Connections, max(CurrentMetric_MySQLConnection) AS MySQL_Connections, max(CurrentMetric_HTTPConnection) AS HTTP_Connections, max(CurrentMetric_InterserverConnection) AS Interserver_Connections FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 13:40:28.142511 [ 808 ] {62dca95e-249f-4840-933f-2bcc262b7e0d} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.655713 [ 81 ] {982d37c2-7e35-44d7-8c16-2a4d72416236} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUVirtualTimeMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.655748 [ 80 ] {1a4df993-67fa-4ef6-af6f-e91cc774aaf1} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.655796 [ 942 ] {d29dd2c9-4e24-4813-8d65-8909c3c0a044} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSIOWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.655838 [ 941 ] {81f07410-738c-46a0-b7f9-98ed7465ca6b} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.660979 [ 942 ] {d29dd2c9-4e24-4813-8d65-8909c3c0a044} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.655966 [ 808 ] {5fe37152-19e0-4ceb-9ed1-1a83a7aaa9bc} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.659722 [ 81 ] {982d37c2-7e35-44d7-8c16-2a4d72416236} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.660061 [ 80 ] {1a4df993-67fa-4ef6-af6f-e91cc774aaf1} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.655911 [ 82 ] {2f44a632-b66c-40b5-aef6-74a7aac15e82} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Merge) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.661669 [ 941 ] {81f07410-738c-46a0-b7f9-98ed7465ca6b} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.663054 [ 808 ] {5fe37152-19e0-4ceb-9ed1-1a83a7aaa9bc} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.667625 [ 82 ] {2f44a632-b66c-40b5-aef6-74a7aac15e82} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.672051 [ 81 ] {a7a41fcb-e03e-4ff5-8528-6f2ac2f03353} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSUserTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.673472 [ 81 ] {a7a41fcb-e03e-4ff5-8528-6f2ac2f03353} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.674721 [ 80 ] {ac9b1120-4487-45c8-ac7d-edfb0e85c5b9} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSSystemTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.675149 [ 942 ] {d59ad792-2277-4bfc-af10-269b60539c9c} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.675511 [ 80 ] {ac9b1120-4487-45c8-ac7d-edfb0e85c5b9} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.677041 [ 942 ] {d59ad792-2277-4bfc-af10-269b60539c9c} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.680041 [ 941 ] {cf68d5f2-16ee-4859-a24a-8676cae4849d} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.681586 [ 82 ] {1e6279c0-3a6b-41da-aaaf-48d61af089f2} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadChars) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.681792 [ 808 ] {843a41ae-78e7-4a58-990c-d898888be4b4} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_MemoryTracking) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.681952 [ 941 ] {cf68d5f2-16ee-4859-a24a-8676cae4849d} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.684172 [ 82 ] {1e6279c0-3a6b-41da-aaaf-48d61af089f2} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.684434 [ 808 ] {843a41ae-78e7-4a58-990c-d898888be4b4} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.684803 [ 81 ] {e3df2d23-38ce-4b74-890e-3a8d41fd9ace} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, arraySum([COLUMNS('CurrentMetric_.*CacheBytes') EXCEPT 'CurrentMetric_FilesystemCache.*' APPLY avg]) AS metric FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.684930 [ 942 ] {c151b3d4-b465-43f8-bac3-9bea64533cf0} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'LoadAverage15') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.687575 [ 81 ] {e3df2d23-38ce-4b74-890e-3a8d41fd9ace} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.688376 [ 80 ] {86bebf15-b36d-4930-a872-69d6741d9f38} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.689476 [ 942 ] {c151b3d4-b465-43f8-bac3-9bea64533cf0} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.691890 [ 80 ] {86bebf15-b36d-4930-a872-69d6741d9f38} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.695318 [ 941 ] {3acbb448-507b-463a-8c56-e5de16614333} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'TotalPartsOfMergeTreeTables') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.696751 [ 82 ] {8ce47033-a356-4826-8a0c-dba29c18fab3} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_InsertedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.697156 [ 941 ] {3acbb448-507b-463a-8c56-e5de16614333} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.697787 [ 808 ] {4fdf3374-0565-4ea6-97d4-7bd44d129ce8} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'MaxPartCountForPartition') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.697580 [ 81 ] {59dc608a-cded-4213-ab61-cac0b2824e11} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(CurrentMetric_TCPConnection) AS TCP_Connections, max(CurrentMetric_MySQLConnection) AS MySQL_Connections, max(CurrentMetric_HTTPConnection) AS HTTP_Connections, max(CurrentMetric_InterserverConnection) AS Interserver_Connections FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:35.698053 [ 82 ] {8ce47033-a356-4826-8a0c-dba29c18fab3} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.699725 [ 808 ] {4fdf3374-0565-4ea6-97d4-7bd44d129ce8} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:35.701168 [ 81 ] {59dc608a-cded-4213-ab61-cac0b2824e11} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.749656 [ 942 ] {a68c51c7-e9ce-41fa-9db3-67ca54fd4480} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSIOWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.750329 [ 941 ] {cf1ee047-ccbc-4f03-8e2c-f72bc81eea22} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Merge) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.751313 [ 81 ] {5c355034-b818-47aa-9dc2-e4169f23e59d} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.752624 [ 941 ] {cf1ee047-ccbc-4f03-8e2c-f72bc81eea22} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.754313 [ 942 ] {a68c51c7-e9ce-41fa-9db3-67ca54fd4480} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.756934 [ 81 ] {5c355034-b818-47aa-9dc2-e4169f23e59d} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.757915 [ 82 ] {e9c5c836-3850-4c9e-b973-96e39eb4213e} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_Query) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.758099 [ 80 ] {94fdecfc-07ee-47ea-87ac-434be378e6b4} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.760678 [ 808 ] {6f909bb7-fade-48b3-ade3-38ae6ee28626} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUVirtualTimeMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.762382 [ 82 ] {e9c5c836-3850-4c9e-b973-96e39eb4213e} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.762843 [ 80 ] {94fdecfc-07ee-47ea-87ac-434be378e6b4} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.767398 [ 808 ] {6f909bb7-fade-48b3-ade3-38ae6ee28626} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.769062 [ 82 ] {6b85e434-a5b0-44a5-9c2e-22be93d25be1} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadBytes) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.770108 [ 942 ] {a8d5c062-ced1-4ea4-a7b6-32e88e6e0217} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSUserTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.771002 [ 941 ] {4cf94ac1-d58e-4f9a-9125-d2ecaba40708} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSCPUWaitMicroseconds) / 1000000 FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.772514 [ 941 ] {4cf94ac1-d58e-4f9a-9125-d2ecaba40708} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.773003 [ 82 ] {6b85e434-a5b0-44a5-9c2e-22be93d25be1} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.773536 [ 81 ] {19e17ab4-77df-4ad3-a2ff-0d4c7f900ceb} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'OSSystemTimeNormalized') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.775533 [ 81 ] {19e17ab4-77df-4ad3-a2ff-0d4c7f900ceb} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.776785 [ 80 ] {ef317cf4-2a9d-452f-b182-e8185467bbbb} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_OSReadChars) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.777592 [ 942 ] {a8d5c062-ced1-4ea4-a7b6-32e88e6e0217} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.779210 [ 80 ] {ef317cf4-2a9d-452f-b182-e8185467bbbb} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.780768 [ 808 ] {0bbc0f7a-b5c7-4f67-85ef-3ab1e82cc773} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(CurrentMetric_MemoryTracking) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.784317 [ 808 ] {0bbc0f7a-b5c7-4f67-85ef-3ab1e82cc773} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.784640 [ 941 ] {fe31c39e-8005-4fc7-938f-80cfec447e39} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, arraySum([COLUMNS('CurrentMetric_.*CacheBytes') EXCEPT 'CurrentMetric_FilesystemCache.*' APPLY avg]) AS metric FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.786235 [ 941 ] {fe31c39e-8005-4fc7-938f-80cfec447e39} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.787355 [ 82 ] {23e505fa-61b6-41d7-876c-84d1cf0d0d9d} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:45368) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'LoadAverage15') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.788449 [ 81 ] {0fe133f1-c640-473c-89b6-19fb9e72837f} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:26881) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_SelectedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.790930 [ 81 ] {0fe133f1-c640-473c-89b6-19fb9e72837f} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.791499 [ 942 ] {beb7ef13-5e9e-4082-bd35-c70581541eb0} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:17978) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(ProfileEvent_InsertedRows) FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.791947 [ 82 ] {23e505fa-61b6-41d7-876c-84d1cf0d0d9d} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.792947 [ 942 ] {beb7ef13-5e9e-4082-bd35-c70581541eb0} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.794272 [ 80 ] {4747cc16-34a9-4507-8b5d-85fb71a08908} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:20279) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, avg(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'TotalPartsOfMergeTreeTables') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.797129 [ 80 ] {4747cc16-34a9-4507-8b5d-85fb71a08908} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.798568 [ 808 ] {6b6cda7c-ca97-4cc4-9054-725f3875cfa0} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:40435) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(CurrentMetric_TCPConnection) AS TCP_Connections, max(CurrentMetric_MySQLConnection) AS MySQL_Connections, max(CurrentMetric_HTTPConnection) AS HTTP_Connections, max(CurrentMetric_InterserverConnection) AS Interserver_Connections FROM merge('system', '^metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.799437 [ 808 ] {6b6cda7c-ca97-4cc4-9054-725f3875cfa0} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:22:37.799966 [ 941 ] {23b911a0-839d-4046-8e2b-bebc698503e8} <Error> executeQuery: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:16869) (in query: SELECT CAST(toStartOfInterval(event_time, toIntervalSecond(_CAST(60, 'UInt32'))), 'INT') AS t, max(value) FROM merge('system', '^asynchronous_metric_log') WHERE (event_date >= toDate(now() - _CAST(86400, 'UInt32'))) AND (event_time >= (now() - _CAST(86400, 'UInt32'))) AND (metric = 'MaxPartCountForPartition') GROUP BY t ORDER BY t ASC WITH FILL STEP _CAST(60, 'UInt32')), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.04 15:22:37.801155 [ 941 ] {23b911a0-839d-4046-8e2b-bebc698503e8} <Error> DynamicQueryHandler: Code: 636. DB::Exception: There are no tables satisfied provided regexp, you must specify table structure manually. (CANNOT_EXTRACT_TABLE_STRUCTURE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::StorageMerge::StorageMerge(DB::StorageID const&, DB::ColumnsDescription const&, String const&, String const&, bool, String const&, std::optional<String> const&, bool, std::shared_ptr<DB::Context const>) @ 0x0000000011f09e28
4. DB::(anonymous namespace)::TableFunctionMerge::executeImpl(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool) const (.fb834b68be2bcc09e3f2a3423b638574) @ 0x000000000f725340
5. DB::ITableFunction::execute(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, String const&, DB::ColumnsDescription, bool, bool) const @ 0x000000001006b84c
6. DB::Context::executeTableFunction(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::ITableFunction> const&) @ 0x00000000113dc770
7. DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x0000000010e12608
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e362cc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.04 15:25:31.367772 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.04 15:25:31.509283 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.04 15:25:31.512804 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.04 15:25:31.607039 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:25:31.607742 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:27:23.164319 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.04 15:27:23.285242 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.04 15:27:23.291449 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.04 15:27:23.335164 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:27:23.335493 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:32:23.116785 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.04 15:32:23.244461 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.04 15:32:23.245517 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.04 15:32:23.315167 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:32:23.315630 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:33:31.448894 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.04 15:33:31.510035 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.04 15:33:31.510456 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.04 15:33:31.560303 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.04 15:33:31.561782 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:28:54.318216 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 19:28:54.440096 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 19:28:54.445877 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 19:28:54.524791 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:28:54.525235 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:31:00.846514 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 19:31:00.952253 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 19:31:00.953272 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 19:31:00.997689 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:31:00.998294 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:33:15.382662 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 19:33:15.463188 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 19:33:15.463561 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 19:33:15.532856 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:33:15.533107 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:35:26.486546 [ 82 ] {} <Warning> HTTPServerRequest: Got an HTTP request with no content length and no chunked/multipart encoding, it may be impossible to distinguish graceful EOF from abnormal connection loss
2025.07.05 19:35:26.495374 [ 80 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 19:35:35.689197 [ 82 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 19:58:57.871076 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 19:58:58.000328 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 19:58:58.001150 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 19:58:58.070392 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 19:58:58.070777 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:18:45.751549 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:18:45.942752 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:18:45.943981 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:18:45.998616 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:18:45.999121 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:24:21.814110 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:24:21.906422 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:24:21.906885 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:24:21.947560 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:24:21.948002 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:28:03.519065 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:28:03.685121 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:28:03.685720 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:28:03.726162 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:28:03.726440 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:30:23.214304 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:30:23.299689 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:30:23.300090 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:30:23.340375 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:30:23.340717 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:36:49.615566 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:36:49.728159 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:36:49.728810 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:36:49.797252 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:36:49.798117 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:40:50.749353 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:40:50.878155 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:40:50.880862 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:40:50.942588 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:40:50.942891 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:49:29.436227 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 20:49:29.598395 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 20:49:29.599219 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 20:49:29.675526 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 20:49:29.675832 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:04:18.847921 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 21:04:19.025569 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 21:04:19.030021 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 21:04:19.130974 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:04:19.131211 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:42:46.329263 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 21:42:46.562783 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 21:42:46.566066 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 21:42:46.652365 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:42:46.652640 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:53:23.466654 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 21:53:23.660734 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 21:53:23.661191 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 21:53:23.714916 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:53:23.715349 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:59:55.591986 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 21:59:55.716183 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 21:59:55.716735 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 21:59:55.821283 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 21:59:55.821581 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 22:10:05.962886 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 22:10:06.109601 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 22:10:06.112770 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 22:10:06.168549 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 22:10:06.168910 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 22:11:06.495856 [ 79 ] {ec8d8bce-b52d-48a9-bc81-9b54febfa72a} <Error> executeQuery: Code: 33. DB::Exception: Cannot read all data in NativeReader. Rows read: 69363. Rows expected: 100000. (CANNOT_READ_ALL_DATA) (version 25.6.1.3206 (official build)) (from 172.18.0.6:44162) (in query: INSERT INTO default.transactions (UniqueId, TransactionDateUTC, Itinerary, OriginAirportCode, DestinationAirportCode, OneWayOrReturn, Segment) VALUES), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<unsigned long, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long&>::type>, unsigned long&&, unsigned long&) @ 0x000000000e0ec3fc
3. DB::NativeReader::readData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, DB::ReadBuffer&, DB::FormatSettings const*, unsigned long, double) @ 0x0000000012abc750
4. DB::NativeReader::read() @ 0x0000000012abda58
5. DB::TCPHandler::receivePacketsExpectData(DB::QueryState&) @ 0x0000000012a70de8
6. DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x0000000012a680e0
7. DB::TCPHandler::runImpl() @ 0x0000000012a5a104
8. DB::TCPHandler::run() @ 0x0000000012a75e64
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc

2025.07.05 22:11:06.496970 [ 79 ] {ec8d8bce-b52d-48a9-bc81-9b54febfa72a} <Error> TCPHandler: Can't send logs or exception to client. Close connection.: Code: 32. DB::Exception: Attempt to read after eof. (ATTEMPT_TO_READ_AFTER_EOF), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::throwReadAfterEOF() @ 0x000000000dba7c0c
4. DB::TCPHandler::receivePacketsExpectData(DB::QueryState&) @ 0x0000000012a71564
5. DB::TCPHandler::skipData(DB::QueryState&) @ 0x0000000012a69660
6. DB::TCPHandler::runImpl() @ 0x0000000012a5af34
7. DB::TCPHandler::run() @ 0x0000000012a75e64
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:11:06.497249 [ 79 ] {} <Error> TCPHandler: Code: 33. DB::Exception: Cannot read all data in NativeReader. Rows read: 69363. Rows expected: 100000. (CANNOT_READ_ALL_DATA), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<unsigned long, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long&>::type>, unsigned long&&, unsigned long&) @ 0x000000000e0ec3fc
3. DB::NativeReader::readData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, DB::ReadBuffer&, DB::FormatSettings const*, unsigned long, double) @ 0x0000000012abc750
4. DB::NativeReader::read() @ 0x0000000012abda58
5. DB::TCPHandler::receivePacketsExpectData(DB::QueryState&) @ 0x0000000012a70de8
6. DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x0000000012a680e0
7. DB::TCPHandler::runImpl() @ 0x0000000012a5a104
8. DB::TCPHandler::run() @ 0x0000000012a75e64
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc

2025.07.05 22:22:11.427874 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.05 22:22:11.659171 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.05 22:22:11.659418 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.05 22:22:11.706471 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 22:22:11.706805 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.05 22:26:15.511536 [ 82 ] {} <Warning> HTTPServerRequest: Got an HTTP request with no content length and no chunked/multipart encoding, it may be impossible to distinguish graceful EOF from abnormal connection loss
2025.07.05 22:26:15.520276 [ 78 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:27:38.500272 [ 78 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:27:50.604269 [ 78 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:27:50.860370 [ 78 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:27:51.137671 [ 78 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:28:17.588773 [ 78 ] {beeacb4a-7c88-4413-b859-d5ae3f4d8d68} <Error> executeQuery: Code: 60. DB::Exception: Table default.load_locations does not exist. (UNKNOWN_TABLE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:53415) (in query: DESCRIBE TABLE default.load_locations;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::IDatabase::getTable(String const&, std::shared_ptr<DB::Context const>) const @ 0x0000000010b545a0
4. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::shared_ptr<DB::Context const>, std::optional<DB::Exception>*) const @ 0x00000000114b0760
5. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::shared_ptr<DB::Context const>) const @ 0x00000000114b8ba0
6. DB::InterpreterDescribeQuery::execute() @ 0x0000000011943d80
7. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
8. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
9. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
10. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
11. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
12. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
13. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
14. Poco::PooledThread::run() @ 0x0000000015a62bf8
15. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
16. ? @ 0x000000000007d5b8
17. ? @ 0x00000000000e5edc

2025.07.05 22:28:17.590069 [ 78 ] {beeacb4a-7c88-4413-b859-d5ae3f4d8d68} <Error> DynamicQueryHandler: Code: 60. DB::Exception: Table default.load_locations does not exist. (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::IDatabase::getTable(String const&, std::shared_ptr<DB::Context const>) const @ 0x0000000010b545a0
4. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::shared_ptr<DB::Context const>, std::optional<DB::Exception>*) const @ 0x00000000114b0760
5. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::shared_ptr<DB::Context const>) const @ 0x00000000114b8ba0
6. DB::InterpreterDescribeQuery::execute() @ 0x0000000011943d80
7. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
8. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
9. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
10. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
11. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
12. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
13. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
14. Poco::PooledThread::run() @ 0x0000000015a62bf8
15. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
16. ? @ 0x000000000007d5b8
17. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:28:42.236444 [ 78 ] {0ac634dc-3a47-46e4-88f1-380b38f09126} <Error> executeQuery: Code: 62. DB::Exception: Syntax error (Multi-statements are not allowed): failed at position 26 (end of query) (line 2, col 25): ;

DESCRIBE TABLE default.load_locations;'

SELECT * FROM default.load_locations LIMIT 10;

. . (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 178.128.69.202:63292) (in query:  SHOW TABLES FROM default; DESCRIBE TABLE default.load_locations;'

SELECT * FROM default.load_locations LIMIT 10;

), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.05 22:28:42.238488 [ 78 ] {0ac634dc-3a47-46e4-88f1-380b38f09126} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error (Multi-statements are not allowed): failed at position 26 (end of query) (line 2, col 25): ;

DESCRIBE TABLE default.load_locations;'

SELECT * FROM default.load_locations LIMIT 10;

. . (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.05 22:28:56.807364 [ 78 ] {90525ccc-7497-4b70-9969-f706bd3f7548} <Error> executeQuery: Code: 60. DB::Exception: Unknown table expression identifier 'default.load_locations' in scope SELECT * FROM default.load_locations LIMIT 10. (UNKNOWN_TABLE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:18290) (in query: SELECT * FROM default.load_locations LIMIT 10;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x000000000941c65c
3. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e090b0
4. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
5. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
6. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
7. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
8. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
9. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
10. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
11. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
12. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
13. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
14. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
15. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
16. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
17. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
18. Poco::PooledThread::run() @ 0x0000000015a62bf8
19. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
20. ? @ 0x000000000007d5b8
21. ? @ 0x00000000000e5edc

2025.07.05 22:28:56.808912 [ 78 ] {90525ccc-7497-4b70-9969-f706bd3f7548} <Error> DynamicQueryHandler: Code: 60. DB::Exception: Unknown table expression identifier 'default.load_locations' in scope SELECT * FROM default.load_locations LIMIT 10. (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x000000000941c65c
3. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e090b0
4. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
5. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
6. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
7. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
8. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
9. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
10. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
11. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
12. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
13. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
14. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
15. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
16. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
17. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
18. Poco::PooledThread::run() @ 0x0000000015a62bf8
19. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
20. ? @ 0x000000000007d5b8
21. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 09:00:37.800407 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 09:00:38.060480 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 09:00:38.063082 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 09:00:38.198472 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:00:38.203488 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:32:13.297726 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 09:32:13.445981 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 09:32:13.446331 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 09:32:13.568559 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:32:13.571842 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:39:18.437159 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 09:39:18.664106 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 09:39:18.666982 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 09:39:18.784663 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:39:18.792018 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:44:33.892205 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 09:44:34.094570 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 09:44:34.095179 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 09:44:34.190000 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:44:34.192102 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:46:34.725989 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 09:46:34.788428 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 09:46:34.788777 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 09:46:34.883139 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 09:46:34.885923 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:14:33.241157 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 10:14:33.390791 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 10:14:33.399020 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 10:14:33.579645 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:14:33.580562 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:28:52.520575 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 10:28:52.685755 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 10:28:52.686219 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 10:28:52.754320 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:28:52.755820 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:50:50.309650 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 10:50:50.443331 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 10:50:50.445415 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 10:50:50.552814 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:50:50.553406 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:54:20.138789 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 10:54:20.310941 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 10:54:20.312509 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 10:54:20.407330 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 10:54:20.408431 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:08:59.614983 [ 81 ] {} <Warning> HTTPServerRequest: Got an HTTP request with no content length and no chunked/multipart encoding, it may be impossible to distinguish graceful EOF from abnormal connection loss
2025.07.06 11:08:59.628999 [ 84 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 11:13:36.414040 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 11:13:36.537035 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 11:13:36.543285 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 11:13:36.693391 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:13:36.694643 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:15:40.170313 [ 83 ] {37b77913-7256-4e18-8df9-29c9a34b1383} <Error> executeQuery: Code: 43. DB::Exception: A value of illegal type was provided as 1st argument 'string' to function 'parseDateTime64BestEffortOrNull'. Expected: String or FixedString, got: DateTime64(3): In scope SELECT UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) AS TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.10:39580) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) as TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>> const&, String, std::basic_string_view<char, std::char_traits<char>> const&, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type>, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&) @ 0x000000000fefbe9c
3. DB::(anonymous namespace)::validateArgumentsImpl(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, unsigned long, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fefa554
4. DB::validateFunctionArguments(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fef9f00
5. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime64, DB::detail::NameParseDateTime64BestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000088a41f4
6. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feeb330
7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
11. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
12. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
13. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
14. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
16. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
17. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
18. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
19. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
20. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
21. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
22. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
23. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
24. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
25. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
26. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
27. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
28. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
29. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
30. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
31. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8

2025.07.06 11:15:40.172615 [ 83 ] {37b77913-7256-4e18-8df9-29c9a34b1383} <Error> DynamicQueryHandler: Code: 43. DB::Exception: A value of illegal type was provided as 1st argument 'string' to function 'parseDateTime64BestEffortOrNull'. Expected: String or FixedString, got: DateTime64(3): In scope SELECT UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) AS TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>> const&, String, std::basic_string_view<char, std::char_traits<char>> const&, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type>, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&) @ 0x000000000fefbe9c
3. DB::(anonymous namespace)::validateArgumentsImpl(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, unsigned long, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fefa554
4. DB::validateFunctionArguments(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fef9f00
5. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime64, DB::detail::NameParseDateTime64BestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000088a41f4
6. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feeb330
7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
11. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
12. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
13. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
14. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
16. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
17. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
18. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
19. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
20. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
21. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
22. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
23. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
24. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
25. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
26. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
27. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
28. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
29. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
30. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
31. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
 (version 25.6.1.3206 (official build))
2025.07.06 11:19:37.912828 [ 83 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 11:19:46.181053 [ 83 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 11:19:46.398604 [ 83 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 11:19:46.638985 [ 83 ] {} <Error> DynamicQueryHandler: Code: 516. DB::Exception: default: Authentication failed: password is incorrect, or there is no user with such name.

If you use ClickHouse Cloud, the password can be reset at https://clickhouse.cloud/
on the settings page for the corresponding service.

If you have installed ClickHouse and forgot password you can reset it in the configuration file.
The password for default user is typically located at /etc/clickhouse-server/users.d/default-password.xml
and deleting this file will reset the password.
See also /etc/clickhouse-server/users.xml on the server where ClickHouse is installed.

. (AUTHENTICATION_FAILED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::AccessControl::authenticate(DB::Credentials const&, Poco::Net::IPAddress const&, DB::ClientInfo const&) const @ 0x0000000010469e54
3. DB::Session::authenticate(DB::Credentials const&, Poco::Net::SocketAddress const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001169ff3c
4. DB::authenticateUserByHTTP(DB::HTTPServerRequest const&, DB::HTMLForm const&, DB::HTTPServerResponse&, DB::Session&, std::unique_ptr<DB::Credentials, std::default_delete<DB::Credentials>>&, DB::HTTPHandlerConnectionConfig const&, std::shared_ptr<DB::Context const>, std::shared_ptr<Poco::Logger>) @ 0x0000000012a8ea00
5. DB::HTTPHandler::authenticateUser(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&) @ 0x00000000129d719c
6. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129d75a4
7. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
8. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
9. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
10. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
11. Poco::PooledThread::run() @ 0x0000000015a62bf8
12. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 11:20:45.048593 [ 83 ] {76fc7074-ef8e-4f90-a7a5-f2b3f5fe5565} <Error> executeQuery: Code: 43. DB::Exception: A value of illegal type was provided as 1st argument 'string' to function 'parseDateTime64BestEffortOrNull'. Expected: String or FixedString, got: DateTime64(3): In scope SELECT UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) AS TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.10:46574) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) as TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>> const&, String, std::basic_string_view<char, std::char_traits<char>> const&, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type>, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&) @ 0x000000000fefbe9c
3. DB::(anonymous namespace)::validateArgumentsImpl(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, unsigned long, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fefa554
4. DB::validateFunctionArguments(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fef9f00
5. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime64, DB::detail::NameParseDateTime64BestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000088a41f4
6. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feeb330
7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
11. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
12. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
13. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
14. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
16. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
17. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
18. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
19. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
20. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
21. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
22. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
23. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
24. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
25. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
26. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
27. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
28. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
29. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
30. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
31. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8

2025.07.06 11:20:45.050632 [ 83 ] {76fc7074-ef8e-4f90-a7a5-f2b3f5fe5565} <Error> DynamicQueryHandler: Code: 43. DB::Exception: A value of illegal type was provided as 1st argument 'string' to function 'parseDateTime64BestEffortOrNull'. Expected: String or FixedString, got: DateTime64(3): In scope SELECT UniqueId, parseDateTime64BestEffortOrNull(TransactionDateUTC) AS TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, std::basic_string_view<char, std::char_traits<char>> const&, String, std::basic_string_view<char, std::char_traits<char>> const&, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>> const&>::type, std::type_identity<String>::type>, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&, std::basic_string_view<char, std::char_traits<char>> const&, String&&) @ 0x000000000fefbe9c
3. DB::(anonymous namespace)::validateArgumentsImpl(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, unsigned long, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fefa554
4. DB::validateFunctionArguments(DB::IFunction const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&, std::vector<DB::FunctionArgumentDescriptor, std::allocator<DB::FunctionArgumentDescriptor>> const&) @ 0x000000000fef9f00
5. DB::detail::FunctionConvertFromString<DB::DataTypeDateTime64, DB::detail::NameParseDateTime64BestEffortOrNull, (DB::detail::ConvertFromStringExceptionMode)2, (DB::detail::ConvertFromStringParsingMode)1>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x00000000088a41f4
6. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feeb330
7. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
8. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
10. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
11. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
12. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
13. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
14. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
16. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
17. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
18. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
19. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
20. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
21. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
22. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
23. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
24. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
25. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
26. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
27. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
28. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
29. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
30. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
31. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
 (version 25.6.1.3206 (official build))
2025.07.06 11:24:13.314535 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 11:24:13.458384 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 11:24:13.459529 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 11:24:13.558706 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:24:13.559669 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:26:30.788005 [ 81 ] {84392b86-3d69-4d28-b050-24e95ce8e31a} <Error> executeQuery: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.10:36836) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
15. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
19. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
20. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
21. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
22. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
23. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
24. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
25. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
26. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
27. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
28. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
29. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
30. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
31. DB::HTTPServerConnection::run() @ 0x0000000012a82b48

2025.07.06 11:26:30.788830 [ 81 ] {84392b86-3d69-4d28-b050-24e95ce8e31a} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
15. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
19. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
20. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
21. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
22. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
23. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
24. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
25. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
26. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
27. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
28. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
29. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
30. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
31. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
 (version 25.6.1.3206 (official build))
2025.07.06 11:31:35.108280 [ 81 ] {58c41546-b179-4867-b93e-188a7b8ae2ab} <Error> executeQuery: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.10:60078) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
15. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
19. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
20. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
21. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
22. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
23. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
24. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
25. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
26. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
27. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
28. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
29. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
30. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
31. DB::HTTPServerConnection::run() @ 0x0000000012a82b48

2025.07.06 11:31:35.109931 [ 81 ] {58c41546-b179-4867-b93e-188a7b8ae2ab} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractArrayRaw(Segment) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
12. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
15. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
19. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
20. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
21. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
22. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
23. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
24. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
25. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
26. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
27. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
28. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
29. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
30. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
31. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
 (version 25.6.1.3206 (official build))
2025.07.06 11:33:36.643348 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 11:33:36.860626 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 11:33:36.866751 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 11:33:37.068335 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:33:37.070078 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:36:19.265229 [ 75 ] {124d6909-ddb2-4523-910e-358a677f72a4} <Error> executeQuery: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.9:46550) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
10. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
11. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
12. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
29. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
31. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88

2025.07.06 11:36:19.266049 [ 75 ] {124d6909-ddb2-4523-910e-358a677f72a4} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
10. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
11. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
12. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
29. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
31. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
 (version 25.6.1.3206 (official build))
2025.07.06 11:41:23.066655 [ 75 ] {88aa749d-7b64-48d4-b42a-187e7a4a7c24} <Error> executeQuery: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.9:33266) (in query: /* {"app": "dbt", "dbt_version": "1.10.3", "profile_name": "profile", "target_name": "dev", "node_id": "model.airline_transactions.stg_transactions"} */
 create or replace view `default`.`stg_transactions` as ( with base as ( select * from `default`.`transactions` ), exploded as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) as SegmentArray from base ), segments as ( select UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, JSONExtractString(segment, 'DepartureAirportCode') as DepartureAirportCode, JSONExtractString(segment, 'ArrivalAirportCode') as ArrivalAirportCode, toInt32OrNull(JSONExtractString(segment, 'SegmentNumber')) as SegmentNumber, toInt32OrNull(JSONExtractString(segment, 'LegNumber')) as LegNumber, toInt32OrNull(JSONExtractString(segment, 'NumberOfPassengers')) as NumberOfPassengers from exploded array join SegmentArray as segment ) select * from segments ) -- end_of_sql
 ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
10. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
11. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
12. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
29. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
31. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88

2025.07.06 11:41:23.067748 [ 75 ] {88aa749d-7b64-48d4-b42a-187e7a4a7c24} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Nested type Array(String) cannot be inside Nullable type: In scope SELECT UniqueId, TransactionDateUTC, OriginAirportCode, DestinationAirportCode, Itinerary, OneWayOrReturn, assumeNotNull(JSONExtractArrayRaw(Segment)) AS SegmentArray FROM base. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DataTypeNullable::DataTypeNullable(std::shared_ptr<DB::IDataType const> const&) @ 0x000000001098f4d0
4. std::shared_ptr<DB::DataTypeNullable> std::allocate_shared[abi:ne190107]<DB::DataTypeNullable, std::allocator<DB::DataTypeNullable>, std::shared_ptr<DB::IDataType const> const&, 0>(std::allocator<DB::DataTypeNullable> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x000000000f71c488
5. DB::JSONOverloadResolver<DB::NameJSONExtractArrayRaw, DB::JSONExtractArrayRawImpl>::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009406e38
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
10. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
11. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
12. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
13. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
14. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
15. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
16. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e361e0
17. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
18. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
19. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
20. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
21. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
22. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
23. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
24. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
25. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
26. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x00000000116124fc
27. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001156f508
28. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001157603c
29. DB::InterpreterCreateQuery::execute() @ 0x00000000115876e0
30. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea890
31. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
 (version 25.6.1.3206 (official build))
2025.07.06 11:43:35.710310 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 11:43:36.169431 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 11:43:36.171297 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 11:43:36.328845 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:43:36.330948 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 11:57:06.314836 [ 78 ] {dc654161-1128-4cab-a001-1218266f93fa} <Error> executeQuery: Code: 81. DB::Exception: Database airline_transactions does not exist. (UNKNOWN_DATABASE) (version 25.6.1.3206 (official build)) (from 178.128.69.202:31497) (in query: SELECT * FROM airline_transactions.stg_transactions LIMIT 10;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DatabaseCatalog::getDatabase(String const&) const @ 0x00000000114b6758
4. DB::Context::resolveStorageID(DB::StorageID, DB::Context::StorageNamespace) const @ 0x0000000011402154
5. DB::IdentifierResolver::tryResolveTableIdentifier(DB::Identifier const&, std::shared_ptr<DB::Context const> const&) @ 0x000000001101aee4
6. DB::QueryAnalyzer::tryResolveIdentifier(DB::IdentifierLookup const&, DB::IdentifierResolveScope&, DB::IdentifierResolveContext) @ 0x0000000010e1c874
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e05ce8
8. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
9. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
10. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
11. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
12. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
13. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
15. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
16. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
17. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
18. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
19. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
20. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
21. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
22. Poco::PooledThread::run() @ 0x0000000015a62bf8
23. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
24. ? @ 0x000000000007d5b8
25. ? @ 0x00000000000e5edc

2025.07.06 11:57:06.316641 [ 78 ] {dc654161-1128-4cab-a001-1218266f93fa} <Error> DynamicQueryHandler: Code: 81. DB::Exception: Database airline_transactions does not exist. (UNKNOWN_DATABASE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000911a578
3. DB::DatabaseCatalog::getDatabase(String const&) const @ 0x00000000114b6758
4. DB::Context::resolveStorageID(DB::StorageID, DB::Context::StorageNamespace) const @ 0x0000000011402154
5. DB::IdentifierResolver::tryResolveTableIdentifier(DB::Identifier const&, std::shared_ptr<DB::Context const> const&) @ 0x000000001101aee4
6. DB::QueryAnalyzer::tryResolveIdentifier(DB::IdentifierLookup const&, DB::IdentifierResolveScope&, DB::IdentifierResolveContext) @ 0x0000000010e1c874
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e05ce8
8. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
9. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
10. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
11. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
12. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
13. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
15. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
16. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
17. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
18. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
19. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
20. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
21. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
22. Poco::PooledThread::run() @ 0x0000000015a62bf8
23. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
24. ? @ 0x000000000007d5b8
25. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 12:08:24.765645 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:08:24.948800 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:08:24.955017 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:08:25.091648 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:08:25.092716 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:16:29.816075 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:16:29.988963 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:16:29.989602 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:16:30.090749 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:16:30.092046 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:21:46.322715 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:21:46.519420 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:21:46.520551 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:21:46.663199 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:21:46.664593 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:24:38.604340 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:24:38.876201 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:24:38.877311 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:24:38.997788 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:24:38.999920 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:35:50.174178 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:35:50.383146 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:35:50.389781 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:35:50.496819 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:35:50.499672 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:41:44.027849 [ 76 ] {4168c3fb-7267-4924-9ecd-8fd59977d209} <Error> executeQuery: Code: 210. DB::Exception: I/O error: Broken pipe, while writing to socket (172.18.0.6:8123 -> 178.128.69.202:33363): While executing JSONEachRowRowOutputFormat. (NETWORK_ERROR) (version 25.6.1.3206 (official build)) (from 178.128.69.202:33363) (in query: SELECT * FROM default. transactions WHERE TransactionDateUTC IS NOT NULL;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000dc93e48
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93bb8
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a01c
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::IOutputFormat::work() @ 0x0000000012b128d4
6. DB::ExecutionThreadContext::executeTask() @ 0x0000000012b060d8
7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012afbb40
8. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000012afa864
9. DB::CompletedPipelineExecutor::execute() @ 0x0000000012af90dc
10. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118f0138
11. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
12. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
13. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
14. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
15. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
16. Poco::PooledThread::run() @ 0x0000000015a62bf8
17. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
18. ? @ 0x000000000007d5b8
19. ? @ 0x00000000000e5edc

2025.07.06 12:41:44.028667 [ 76 ] {4168c3fb-7267-4924-9ecd-8fd59977d209} <Error> DynamicQueryHandler: Code: 210. DB::Exception: I/O error: Broken pipe, while writing to socket (172.18.0.6:8123 -> 178.128.69.202:33363): While executing JSONEachRowRowOutputFormat. (NETWORK_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x000000000dc93e48
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93bb8
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a01c
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::IOutputFormat::work() @ 0x0000000012b128d4
6. DB::ExecutionThreadContext::executeTask() @ 0x0000000012b060d8
7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012afbb40
8. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000012afa864
9. DB::CompletedPipelineExecutor::execute() @ 0x0000000012af90dc
10. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118f0138
11. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
12. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
13. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
14. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
15. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
16. Poco::PooledThread::run() @ 0x0000000015a62bf8
17. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
18. ? @ 0x000000000007d5b8
19. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 12:41:44.029994 [ 76 ] {4168c3fb-7267-4924-9ecd-8fd59977d209} <Error> bool DB::WriteBufferFromHTTPServerResponse::cancelWithException(HTTPServerRequest &, int, const std::string &, WriteBuffer *): Failed to send exception to the response write buffer.: Code: 236. DB::Exception: Write buffer has been canceled. (ABORTED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::WriteBufferFromHTTPServerResponse::cancelWithException(DB::HTTPServerRequest&, int, String const&, DB::WriteBuffer*) @ 0x0000000012a8b15c
4. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129e02f4
5. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
6. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
7. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
8. Poco::PooledThread::run() @ 0x0000000015a62bf8
9. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
10. ? @ 0x000000000007d5b8
11. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 12:44:21.365606 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 12:44:21.608073 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 12:44:21.612717 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 12:44:21.748229 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 12:44:21.749313 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 13:54:58.000569 [ 81 ] {898c1778-c41e-413d-8c5f-6e9125d5f299} <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 9000
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 178.128.69.202:63950) (in query: clickhouse-client --host clickhouse --port 9000
 USE default;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.06 13:54:58.002899 [ 81 ] {898c1778-c41e-413d-8c5f-6e9125d5f299} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 9000
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 13:55:14.918148 [ 81 ] {b0f12292-0ba2-4176-89e1-d63c50ee25f0} <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 8123
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 178.128.69.202:59425) (in query: clickhouse-client --host clickhouse --port 8123
 USE default;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.06 13:55:14.919441 [ 81 ] {b0f12292-0ba2-4176-89e1-d63c50ee25f0} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 8123
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 13:55:16.030503 [ 81 ] {b882cbea-aa29-47d4-ac5f-57413bf48906} <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 8123
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 178.128.69.202:59425) (in query: clickhouse-client --host clickhouse --port 8123
 USE default;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.06 13:55:16.031836 [ 81 ] {b882cbea-aa29-47d4-ac5f-57413bf48906} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error: failed at position 1 (clickhouse) (line 1, col 1): clickhouse-client --host clickhouse --port 8123
USE default;. Expected one of: Query, Query with output, EXPLAIN, EXPLAIN, SELECT query, possibly with UNION, list of union elements, SELECT query, subquery, possibly with UNION, SELECT subquery, SELECT query, WITH, FROM, SELECT, SHOW CREATE QUOTA query, SHOW CREATE, SHOW [FULL] [TEMPORARY] TABLES|DATABASES|CLUSTERS|CLUSTER|MERGES 'name' [[NOT] [I]LIKE 'str'] [LIMIT expr], SHOW, SHOW COLUMNS query, SHOW ENGINES query, SHOW ENGINES, SHOW FUNCTIONS query, SHOW FUNCTIONS, SHOW INDEXES query, SHOW SETTING query, SHOW SETTING, EXISTS or SHOW CREATE query, EXISTS, DESCRIBE FILESYSTEM CACHE query, DESCRIBE, DESC, DESCRIBE query, SHOW PROCESSLIST query, SHOW PROCESSLIST, CREATE TABLE or ATTACH TABLE query, CREATE, ATTACH, REPLACE, CREATE DATABASE query, CREATE VIEW query, CREATE DICTIONARY, CREATE LIVE VIEW query, CREATE WINDOW VIEW query, ALTER query, ALTER TABLE, ALTER TEMPORARY TABLE, ALTER DATABASE, RENAME query, RENAME DATABASE, RENAME TABLE, EXCHANGE TABLES, RENAME DICTIONARY, EXCHANGE DICTIONARIES, RENAME, DROP query, DROP, DETACH, TRUNCATE, UNDROP query, UNDROP, CHECK ALL TABLES, CHECK TABLE, KILL QUERY query, KILL, OPTIMIZE query, OPTIMIZE TABLE, WATCH query, WATCH, SHOW ACCESS query, SHOW ACCESS, ShowAccessEntitiesQuery, SHOW GRANTS query, SHOW GRANTS, SHOW PRIVILEGES query, SHOW PRIVILEGES, BACKUP or RESTORE query, BACKUP, RESTORE, INSERT query, INSERT INTO, USE query, USE, SET ROLE or SET DEFAULT ROLE query, SET ROLE DEFAULT, SET ROLE, SET DEFAULT ROLE, SET query, SET, SYSTEM query, SYSTEM, CREATE USER or ALTER USER query, ALTER USER, CREATE USER, CREATE ROLE or ALTER ROLE query, ALTER ROLE, CREATE ROLE, CREATE QUOTA or ALTER QUOTA query, ALTER QUOTA, CREATE QUOTA, CREATE ROW POLICY or ALTER ROW POLICY query, ALTER POLICY, ALTER ROW POLICY, CREATE POLICY, CREATE ROW POLICY, CREATE SETTINGS PROFILE or ALTER SETTINGS PROFILE query, ALTER SETTINGS PROFILE, ALTER PROFILE, CREATE SETTINGS PROFILE, CREATE PROFILE, CREATE FUNCTION query, DROP FUNCTION query, CREATE WORKLOAD query, DROP WORKLOAD query, CREATE RESOURCE query, DROP RESOURCE query, CREATE NAMED COLLECTION, DROP NAMED COLLECTION query, Alter NAMED COLLECTION query, ALTER, CREATE INDEX query, DROP INDEX query, DROP access entity query, MOVE access entity query, MOVE, GRANT or REVOKE query, REVOKE, GRANT, CHECK GRANT, CHECK GRANT, EXTERNAL DDL query, EXTERNAL DDL FROM, TCL query, BEGIN TRANSACTION, START TRANSACTION, COMMIT, ROLLBACK, SET TRANSACTION SNAPSHOT, Delete query, DELETE, Update query, UPDATE. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:03:07.098366 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 14:03:07.306253 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 14:03:07.307312 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 14:03:07.542566 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 14:03:07.544630 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 14:52:45.433299 [ 81 ] {eed0e42a-587a-4ae6-9083-a374ba74511d} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `Country` in scope SELECT Country, COUNT(*) AS transaction_count FROM int_transactions_enriched GROUP BY Country ORDER BY transaction_count DESC. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:46864) (in query: -- Metabase:: userID: 1 queryType: native queryHash: c136a18e4b05321ce75f0296b9eaf8484f0cac40641119befde9f280b193de71
 SELECT Country, COUNT(*) AS transaction_count FROM int_transactions_enriched GROUP BY Country ORDER BY transaction_count DESC), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
8. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
9. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
10. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
11. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
12. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
13. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
14. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
18. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
19. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
21. Poco::PooledThread::run() @ 0x0000000015a62bf8
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
23. ? @ 0x000000000007d5b8
24. ? @ 0x00000000000e5edc

2025.07.06 14:52:45.434922 [ 81 ] {eed0e42a-587a-4ae6-9083-a374ba74511d} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `Country` in scope SELECT Country, COUNT(*) AS transaction_count FROM int_transactions_enriched GROUP BY Country ORDER BY transaction_count DESC. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
8. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
9. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
10. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
11. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
12. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
13. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
14. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
18. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
19. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
21. Poco::PooledThread::run() @ 0x0000000015a62bf8
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
23. ? @ 0x000000000007d5b8
24. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:53:20.642493 [ 81 ] {6bcea30e-ab7b-41a6-9288-817bf3270c50} <Error> executeQuery: Code: 209. DB::Exception: Timeout exceeded while writing to socket (172.18.0.8:46878, 30000 ms): While executing ParallelFormattingOutputFormat. (SOCKET_TIMEOUT) (version 25.6.1.3206 (official build)) (from 172.18.0.8:46878) (in query: -- Metabase:: userID: 1 queryType: native queryHash: bf7b7669fb2f1c89d243b68cdebd5a1eb4710e460bedd53285274e52ee32efa5
 SELECT `default`.`int_transactions_enriched`.`UniqueId` AS `UniqueId`, `default`.`int_transactions_enriched`.`TransactionDateUTC` AS `TransactionDateUTC`, `default`.`int_transactions_enriched`.`OriginAirportCode` AS `OriginAirportCode`, `default`.`int_transactions_enriched`.`DestinationAirportCode` AS `DestinationAirportCode`, `default`.`int_transactions_enriched`.`Itinerary` AS `Itinerary`, `default`.`int_transactions_enriched`.`OneWayOrReturn` AS `OneWayOrReturn`, `default`.`int_transactions_enriched`.`DepartureAirportCode` AS `DepartureAirportCode`, `default`.`int_transactions_enriched`.`ArrivalAirportCode` AS `ArrivalAirportCode`, `default`.`int_transactions_enriched`.`SegmentNumber` AS `SegmentNumber`, `default`.`int_transactions_enriched`.`LegNumber` AS `LegNumber`, `default`.`int_transactions_enriched`.`NumberOfPassengers` AS `NumberOfPassengers`, `default`.`int_transactions_enriched`.`OriginCountry` AS `OriginCountry`, `default`.`int_transactions_enriched`.`DestinationCountry` AS `DestinationCountry`, `default`.`int_transactions_enriched`.`NumberOfSegments` AS `NumberOfSegments`, `default`.`int_transactions_enriched`.`JourneyType` AS `JourneyType` FROM `default`.`int_transactions_enriched` LIMIT 1048575), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<long>::type>, String&&, long&&) @ 0x000000000dc93f98
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93b18
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a038
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
6. DB::CompressedWriteBuffer::nextImpl() @ 0x00000000132c7fb4
7. DB::WriteBuffer::next() @ 0x0000000009125fd8
8. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
9. DB::ParallelFormattingOutputFormat::collectorThreadFunction(std::shared_ptr<DB::ThreadGroup> const&) @ 0x0000000012c728f4
10. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()>(DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012ab0c9c
11. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000dbf9474
12. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000dbffd5c
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc

2025.07.06 14:53:20.644841 [ 81 ] {6bcea30e-ab7b-41a6-9288-817bf3270c50} <Error> DynamicQueryHandler: Code: 209. DB::Exception: Timeout exceeded while writing to socket (172.18.0.8:46878, 30000 ms): While executing ParallelFormattingOutputFormat. (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<long>::type>, String&&, long&&) @ 0x000000000dc93f98
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93b18
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a038
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
6. DB::CompressedWriteBuffer::nextImpl() @ 0x00000000132c7fb4
7. DB::WriteBuffer::next() @ 0x0000000009125fd8
8. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
9. DB::ParallelFormattingOutputFormat::collectorThreadFunction(std::shared_ptr<DB::ThreadGroup> const&) @ 0x0000000012c728f4
10. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()>(DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012ab0c9c
11. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000dbf9474
12. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000dbffd5c
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:53:20.646386 [ 81 ] {6bcea30e-ab7b-41a6-9288-817bf3270c50} <Error> bool DB::WriteBufferFromHTTPServerResponse::cancelWithException(HTTPServerRequest &, int, const std::string &, WriteBuffer *): Failed to send exception to the response write buffer.: Code: 236. DB::Exception: Write buffer has been canceled. (ABORTED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::WriteBufferFromHTTPServerResponse::cancelWithException(DB::HTTPServerRequest&, int, String const&, DB::WriteBuffer*) @ 0x0000000012a8b15c
4. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129e02f4
5. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
6. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
7. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
8. Poco::PooledThread::run() @ 0x0000000015a62bf8
9. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
10. ? @ 0x000000000007d5b8
11. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:56:20.094963 [ 79 ] {4bf88f88-94a8-44a3-9ff6-5f4322f0599f} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:53324) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 8d798d2008292291abc3316ff8ff0e0460ba8a432835e245f022938cb2671713
 SELECT num_segments, COUNT(*) AS transaction_count FROM ( SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 14:56:20.096015 [ 79 ] {4bf88f88-94a8-44a3-9ff6-5f4322f0599f} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:57:06.777696 [ 79 ] {e586ef18-3434-407e-bd4c-fcd31117fa4b} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:42866) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 869910a17cbff0026d6d506edc9f8e302a0e9dbd3121db6048da0f3a1d37c4ca
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 14:57:06.779188 [ 79 ] {e586ef18-3434-407e-bd4c-fcd31117fa4b} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:57:07.908108 [ 79 ] {1831f7a6-9d7a-4ba4-bca4-5f8a7d6e8466} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:42866) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 869910a17cbff0026d6d506edc9f8e302a0e9dbd3121db6048da0f3a1d37c4ca
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 14:57:07.908888 [ 79 ] {1831f7a6-9d7a-4ba4-bca4-5f8a7d6e8466} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:57:39.046379 [ 79 ] {154566a9-7e26-4018-a91d-aa60eabcfe82} <Error> executeQuery: Code: 46. DB::Exception: Function with name `array_length` does not exist. In scope SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. Maybe you meant: ['CHAR_LENGTH']. (UNKNOWN_FUNCTION) (version 25.6.1.3206 (official build)) (from 172.18.0.8:58812) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 6257f86cf35606c09c0be3806626db43052def625c98fc7d0c3d6f2f42a21349
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x00000000091b8680
3. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e280a0
4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc

2025.07.06 14:57:39.047618 [ 79 ] {154566a9-7e26-4018-a91d-aa60eabcfe82} <Error> DynamicQueryHandler: Code: 46. DB::Exception: Function with name `array_length` does not exist. In scope SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. Maybe you meant: ['CHAR_LENGTH']. (UNKNOWN_FUNCTION), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x00000000091b8680
3. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e280a0
4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:58:32.047487 [ 79 ] {2319eb44-7a27-4899-8a06-f052d2680ed9} <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 269 (int_transactions_enriched) (line 11, col 7): int_transactions_enriched
  ) AS subquery
GROUP BY
  num_segments
ORDER BY
  num_segments. Expected one of: token sequence, Dot, token, OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, Comma, FROM, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 172.18.0.8:42248) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 93a924b7224701bf2a470772e0545a858ca8f0d4296003671761b60802a2f38b
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT UniqueId, length(Segments) AS num_segments, FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.06 14:58:32.048259 [ 79 ] {2319eb44-7a27-4899-8a06-f052d2680ed9} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error: failed at position 269 (int_transactions_enriched) (line 11, col 7): int_transactions_enriched
  ) AS subquery
GROUP BY
  num_segments
ORDER BY
  num_segments. Expected one of: token sequence, Dot, token, OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, Comma, FROM, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:59:13.916651 [ 79 ] {5c44667d-e89b-4e84-8413-5600a53bdc37} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression or function identifier `Segments` in scope SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:38914) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 5238d1d90669045099e7a1ca3e70f13f05df5c11f1b7aaa7060abec5f80db7a0
 SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
7. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
8. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 14:59:13.921371 [ 79 ] {5c44667d-e89b-4e84-8413-5600a53bdc37} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression or function identifier `Segments` in scope SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
7. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
8. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 14:59:31.851653 [ 79 ] {b6d4e81e-2767-4afe-81bf-c7d0f6865421} <Error> executeQuery: Code: 43. DB::Exception: Illegal type UInt64 of argument of function length: In scope SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.8:51716) (in query: -- Metabase:: userID: 1 queryType: native queryHash: cd7d3c77e9c6272d8b9956f6ad06b4dcc91ffc3e6cf6a678377467a5cc1cac79
 SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::FunctionStringOrArrayToT<DB::LengthImpl, DB::NameLength, unsigned long, false>::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000000d8af7dc
4. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009119788
5. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc

2025.07.06 14:59:31.852912 [ 79 ] {b6d4e81e-2767-4afe-81bf-c7d0f6865421} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Illegal type UInt64 of argument of function length: In scope SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::FunctionStringOrArrayToT<DB::LengthImpl, DB::NameLength, unsigned long, false>::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000000d8af7dc
4. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009119788
5. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:40.686071 [ 4935 ] {3fd213f4-1c4c-437d-ae5e-c54f8373a4a6} <Error> executeQuery: Code: 43. DB::Exception: Illegal type UInt64 of argument of function length: In scope SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (ILLEGAL_TYPE_OF_ARGUMENT) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: cd7d3c77e9c6272d8b9956f6ad06b4dcc91ffc3e6cf6a678377467a5cc1cac79
 SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::FunctionStringOrArrayToT<DB::LengthImpl, DB::NameLength, unsigned long, false>::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000000d8af7dc
4. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009119788
5. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc

2025.07.06 17:54:40.687271 [ 4935 ] {3fd213f4-1c4c-437d-ae5e-c54f8373a4a6} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Illegal type UInt64 of argument of function length: In scope SELECT length(NumberOfSegments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000911a33c
3. DB::FunctionStringOrArrayToT<DB::LengthImpl, DB::NameLength, unsigned long, false>::getReturnTypeImpl(std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000000d8af7dc
4. DB::IFunction::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000009119788
5. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000feebd88
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e25d98
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
8. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
9. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:41.633733 [ 4935 ] {3291d46d-0735-421b-ab55-749b83a87540} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression or function identifier `Segments` in scope SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 5238d1d90669045099e7a1ca3e70f13f05df5c11f1b7aaa7060abec5f80db7a0
 SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
7. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
8. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 17:54:41.634572 [ 4935 ] {3291d46d-0735-421b-ab55-749b83a87540} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression or function identifier `Segments` in scope SELECT length(Segments) AS num_segments, count(*) AS transaction_count FROM default.int_transactions_enriched GROUP BY num_segments ORDER BY num_segments ASC. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e21410
6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
7. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
8. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:42.255445 [ 4935 ] {51dc4060-2305-4d93-afc1-fdef7ea797f5} <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 269 (int_transactions_enriched) (line 11, col 7): int_transactions_enriched
  ) AS subquery
GROUP BY
  num_segments
ORDER BY
  num_segments. Expected one of: token sequence, Dot, token, OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, Comma, FROM, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. (SYNTAX_ERROR) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 93a924b7224701bf2a470772e0545a858ca8f0d4296003671761b60802a2f38b
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT UniqueId, length(Segments) AS num_segments, FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc

2025.07.06 17:54:42.256119 [ 4935 ] {51dc4060-2305-4d93-afc1-fdef7ea797f5} <Error> DynamicQueryHandler: Code: 62. DB::Exception: Syntax error: failed at position 269 (int_transactions_enriched) (line 11, col 7): int_transactions_enriched
  ) AS subquery
GROUP BY
  num_segments
ORDER BY
  num_segments. Expected one of: token sequence, Dot, token, OR, AND, IS NOT DISTINCT FROM, IS NULL, IS NOT NULL, BETWEEN, NOT BETWEEN, LIKE, ILIKE, NOT LIKE, NOT ILIKE, REGEXP, IN, NOT IN, GLOBAL IN, GLOBAL NOT IN, MOD, DIV, alias, AS, Comma, FROM, PREWHERE, WHERE, GROUP BY, WITH, HAVING, WINDOW, QUALIFY, ORDER BY, LIMIT, OFFSET, FETCH, SETTINGS, UNION, EXCEPT, INTERSECT. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::createDeprecated(String const&, int, bool) @ 0x000000000db88060
2. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, String const&, bool, unsigned long, unsigned long, unsigned long) @ 0x0000000013463b78
3. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118e77bc
4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
5. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
6. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
7. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
8. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
9. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
10. Poco::PooledThread::run() @ 0x0000000015a62bf8
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
12. ? @ 0x000000000007d5b8
13. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:42.938894 [ 4935 ] {8f8db667-397b-4532-aafb-984a4bb99cd3} <Error> executeQuery: Code: 46. DB::Exception: Function with name `array_length` does not exist. In scope SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. Maybe you meant: ['CHAR_LENGTH']. (UNKNOWN_FUNCTION) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 6257f86cf35606c09c0be3806626db43052def625c98fc7d0c3d6f2f42a21349
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x00000000091b8680
3. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e280a0
4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc

2025.07.06 17:54:42.939801 [ 4935 ] {8f8db667-397b-4532-aafb-984a4bb99cd3} <Error> DynamicQueryHandler: Code: 46. DB::Exception: Function with name `array_length` does not exist. In scope SELECT UniqueId, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. Maybe you meant: ['CHAR_LENGTH']. (UNKNOWN_FUNCTION), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<String, String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&, String&&) @ 0x00000000091b8680
3. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e280a0
4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e150
5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
6. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
7. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
8. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
9. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
10. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
11. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
12. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
13. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
14. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
15. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
16. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
17. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
18. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
19. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
20. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
21. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
22. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
23. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
25. Poco::PooledThread::run() @ 0x0000000015a62bf8
26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
27. ? @ 0x000000000007d5b8
28. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:43.527951 [ 4935 ] {c3aa733b-bddc-4b36-a71c-e3b486879a32} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 869910a17cbff0026d6d506edc9f8e302a0e9dbd3121db6048da0f3a1d37c4ca
 SELECT NumberOfSegments, COUNT(*) AS transaction_count FROM ( SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 17:54:43.528781 [ 4935 ] {c3aa733b-bddc-4b36-a71c-e3b486879a32} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(NumberOfSegments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:54:44.174024 [ 4935 ] {67ceb585-90dc-421c-8c63-81a07180d7a3} <Error> executeQuery: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER) (version 25.6.1.3206 (official build)) (from 172.18.0.8:59152) (in query: -- Metabase:: userID: 1 queryType: native queryHash: 8d798d2008292291abc3316ff8ff0e0460ba8a432835e245f022938cb2671713
 SELECT num_segments, COUNT(*) AS transaction_count FROM ( SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched ) AS subquery GROUP BY num_segments ORDER BY num_segments), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc

2025.07.06 17:54:44.175852 [ 4935 ] {67ceb585-90dc-421c-8c63-81a07180d7a3} <Error> DynamicQueryHandler: Code: 47. DB::Exception: Unknown expression identifier `id` in scope SELECT id, array_length(Segments) AS num_segments FROM int_transactions_enriched. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x0000000010e34d34
3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0faec
4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000010e0d7a0
5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000010e357f8
6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e063a4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000010e0e0b0
8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x0000000010e360fc
9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000010e06370
10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04c20
11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010e04370
12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010e4d93c
13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.14808732858900239035) @ 0x00000000116120c4
14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000116102fc
15. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.14808732858900239035) @ 0x0000000011613844
16. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000115ad1dc
17. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000118ea32c
18. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>, std::function<void ()>) @ 0x00000000118efb88
19. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129db7c8
20. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129de780
21. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
22. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
23. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
24. Poco::PooledThread::run() @ 0x0000000015a62bf8
25. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
26. ? @ 0x000000000007d5b8
27. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:56:22.668658 [ 4935 ] {72665f31-3f7d-414b-81e7-ffaedd65d4b0} <Error> executeQuery: Code: 209. DB::Exception: Timeout exceeded while writing to socket (172.18.0.8:39066, 30000 ms): While executing ParallelFormattingOutputFormat. (SOCKET_TIMEOUT) (version 25.6.1.3206 (official build)) (from 172.18.0.8:39066) (in query: -- Metabase:: userID: 1 queryType: native queryHash: bf7b7669fb2f1c89d243b68cdebd5a1eb4710e460bedd53285274e52ee32efa5
 SELECT `default`.`int_transactions_enriched`.`UniqueId` AS `UniqueId`, `default`.`int_transactions_enriched`.`TransactionDateUTC` AS `TransactionDateUTC`, `default`.`int_transactions_enriched`.`OriginAirportCode` AS `OriginAirportCode`, `default`.`int_transactions_enriched`.`DestinationAirportCode` AS `DestinationAirportCode`, `default`.`int_transactions_enriched`.`Itinerary` AS `Itinerary`, `default`.`int_transactions_enriched`.`OneWayOrReturn` AS `OneWayOrReturn`, `default`.`int_transactions_enriched`.`DepartureAirportCode` AS `DepartureAirportCode`, `default`.`int_transactions_enriched`.`ArrivalAirportCode` AS `ArrivalAirportCode`, `default`.`int_transactions_enriched`.`SegmentNumber` AS `SegmentNumber`, `default`.`int_transactions_enriched`.`LegNumber` AS `LegNumber`, `default`.`int_transactions_enriched`.`NumberOfPassengers` AS `NumberOfPassengers`, `default`.`int_transactions_enriched`.`OriginCountry` AS `OriginCountry`, `default`.`int_transactions_enriched`.`DestinationCountry` AS `DestinationCountry`, `default`.`int_transactions_enriched`.`NumberOfSegments` AS `NumberOfSegments`, `default`.`int_transactions_enriched`.`JourneyType` AS `JourneyType` FROM `default`.`int_transactions_enriched` LIMIT 1048575), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<long>::type>, String&&, long&&) @ 0x000000000dc93f98
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93b18
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a038
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
6. DB::CompressedWriteBuffer::nextImpl() @ 0x00000000132c7fb4
7. DB::WriteBuffer::next() @ 0x0000000009125fd8
8. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
9. DB::ParallelFormattingOutputFormat::collectorThreadFunction(std::shared_ptr<DB::ThreadGroup> const&) @ 0x0000000012c728f4
10. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()>(DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012ab0c9c
11. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000dbf9474
12. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000dbffd5c
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc

2025.07.06 17:56:22.673278 [ 4935 ] {72665f31-3f7d-414b-81e7-ffaedd65d4b0} <Error> DynamicQueryHandler: Code: 209. DB::Exception: Timeout exceeded while writing to socket (172.18.0.8:39066, 30000 ms): While executing ParallelFormattingOutputFormat. (SOCKET_TIMEOUT), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::NetException::NetException<String, long>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<long>::type>, String&&, long&&) @ 0x000000000dc93f98
2. DB::WriteBufferFromPocoSocket::socketSendBytes(char const*, unsigned long) @ 0x000000000dc93b18
3. DB::WriteBufferFromHTTPServerResponse::nextImpl() @ 0x0000000012a8a038
4. DB::WriteBuffer::next() @ 0x0000000009125fd8
5. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
6. DB::CompressedWriteBuffer::nextImpl() @ 0x00000000132c7fb4
7. DB::WriteBuffer::next() @ 0x0000000009125fd8
8. DB::WriteBuffer::write(char const*, unsigned long) @ 0x000000000dba83f0
9. DB::ParallelFormattingOutputFormat::collectorThreadFunction(std::shared_ptr<DB::ThreadGroup> const&) @ 0x0000000012c728f4
10. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()>(DB::ParallelFormattingOutputFormat::ParallelFormattingOutputFormat(DB::ParallelFormattingOutputFormat::Params)::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000012ab0c9c
11. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000dbf9474
12. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000dbffd5c
13. ? @ 0x000000000007d5b8
14. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 17:56:22.674537 [ 4935 ] {72665f31-3f7d-414b-81e7-ffaedd65d4b0} <Error> bool DB::WriteBufferFromHTTPServerResponse::cancelWithException(HTTPServerRequest &, int, const std::string &, WriteBuffer *): Failed to send exception to the response write buffer.: Code: 236. DB::Exception: Write buffer has been canceled. (ABORTED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dad8c08
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000911a81c
2. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000009125a94
3. DB::WriteBufferFromHTTPServerResponse::cancelWithException(DB::HTTPServerRequest&, int, String const&, DB::WriteBuffer*) @ 0x0000000012a8b15c
4. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000129e02f4
5. DB::HTTPServerConnection::run() @ 0x0000000012a82b48
6. Poco::Net::TCPServerConnection::start() @ 0x0000000015a985d8
7. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015a98af4
8. Poco::PooledThread::run() @ 0x0000000015a62bf8
9. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015a60fd0
10. ? @ 0x000000000007d5b8
11. ? @ 0x00000000000e5edc
 (version 25.6.1.3206 (official build))
2025.07.06 18:07:44.268356 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 18:07:44.449930 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 18:07:44.451485 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 18:07:44.675034 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:07:44.678976 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:15:45.896584 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 18:15:46.116804 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 18:15:46.124425 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 18:15:46.253552 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:15:46.254540 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:19:54.427713 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 18:19:54.622747 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 18:19:54.625544 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 18:19:54.805882 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:19:54.808195 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:28:54.143364 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 18:28:54.408311 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 18:28:54.409215 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 18:28:54.531862 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:28:54.533887 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:50:33.010185 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 18:50:33.264353 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 18:50:33.264836 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 18:50:33.347323 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 18:50:33.348619 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 19:07:35.788701 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.07.06 19:07:35.983848 [ 1 ] {} <Warning> Context: Linux transparent hugepages are set to "always". Check /sys/kernel/mm/transparent_hugepage/enabled
2025.07.06 19:07:35.984420 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.07.06 19:07:36.129225 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.07.06 19:07:36.131339 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 25.6.1.3206 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
